<?php

	/**
	 * See the composer.json file for information regarding the authorship and copyright of this file,
	 * or refer to https://packagist.org/packages/liftkit/core.
	 */


	namespace LiftKit\Router;


	use LiftKit\Router\Route\Route;
	use LiftKit\Request\Request;
	use LiftKit\Response\Response;
	use LiftKit\Router\Exception\NoMatchingRoute as NoMatchingRouteException;


	/**
	 * Basic Router
	 *
	 * This is a simple Router. A Router is a container class that stores Route objects, and executes the first match when
	 * the execute() method is called.
	 *
	 * @api
	 *
	 * @package LiftKit\Router
	 */
	class Router
	{
		/**
		 * An array of stored routes.
		 *
		 * @internal
		 *
		 * @var Route[]
		 */
		protected $routes = array();


		/**
		 * Registers a new Route
		 *
		 * @api
		 *
		 * @param Route  $route           Route object
		 * @param string $routeIdentifier A string identifier for the Route. Optional.
		 */
		public function registerRoute (Route $route, $routeIdentifier = null)
		{
			if (! $routeIdentifier) {
				$routeIdentifier = uniqid();
			}

			$this->routes[$routeIdentifier] = $route;
		}


		/**
		 * Iterates over stored routes in the order they were registered. Executes the first matching route.
		 *
		 * @api
		 *
		 * @param Request $request An object that represents the request.
		 *
		 * @return Response
		 */
		public function execute (Request $request)
		{
			foreach ($this->routes as $route) {
				if ($route->isValid($request)) {
					return $route->execute($request);
				}
			}

			throw new NoMatchingRouteException('No matching route found.');
		}
	}
